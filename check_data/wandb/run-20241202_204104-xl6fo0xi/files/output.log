[1m========================== test session starts ===========================[0m
platform linux -- Python 3.13.0, pytest-8.3.4, pluggy-1.5.0 -- /home/ymarca/anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/bin/python3.13
cachedir: .pytest_cache
rootdir: /home/ymarca/Code/music_genre_classification/check_data
collected 4 items                                                        [0m

test_data.py::test_column_presence_and_type [31mERROR[0m
test_data.py::test_class_names [31mERROR[0m
test_data.py::test_column_ranges [31mERROR[0m
test_data.py::test_kolmogorov_smirnov [31mERROR[0m

================================= ERRORS =================================
[31m[1m____________ ERROR at setup of test_column_presence_and_type _____________[0m

args = (<wandb.apis.public.api.Api object at 0x7f58fc807a10>,)
kwargs = {'name': 'music_genre_classification/preprocessed_data.csv:latest', 'type': None}
message = "artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'"
payload = "artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'"

    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)

[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/normalize.py[0m:25:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/public/api.py[0m:1210: in _artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>

    @classmethod
    def _from_name(
        cls,
        *,
        entity: str,
        project: str,
        name: str,
        client: RetryingClient,
        enable_tracking: bool = False,
    ) -> Artifact:
        server_supports_enabling_artifact_usage_tracking = (
            InternalApi().server_project_type_introspection()
        )
        query_vars = ["$entityName: String!", "$projectName: String!", "$name: String!"]
        query_args = ["name: $name"]
        if server_supports_enabling_artifact_usage_tracking:
            query_vars.append("$enableTracking: Boolean")
            query_args.append("enableTracking: $enableTracking")

        vars_str = ", ".join(query_vars)
        args_str = ", ".join(query_args)

        query = gql(
            f"""
            query ArtifactByName({vars_str}) {{
                project(name: $projectName, entityName: $entityName) {{
                    artifact({args_str}) {{
                        ...ArtifactFragment
                    }}
                }}
            }}
            {_gql_artifact_fragment()}
            """
        )
        query_variable_values: dict[str, Any] = {
            "entityName": entity,
            "projectName": project,
            "name": name,
        }
        if server_supports_enabling_artifact_usage_tracking:
            query_variable_values["enableTracking"] = enable_tracking

        response = client.execute(
            query,
            variable_values=query_variable_values,
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[1m[31mE           ValueError: artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'[0m

[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/artifacts/artifact.py[0m:279: ValueError

[33mDuring handling of the above exception, another exception occurred:[0m

request = <SubRequest 'data' for <Function test_column_presence_and_type>>

    @pytest.fixture(scope="session")
    def data(request):

        reference_artifact = request.config.option.reference_artifact

        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")

        sample_artifact = request.config.option.sample_artifact

        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")

>       local_path = run.use_artifact(reference_artifact).file()

[1m[31mconftest.py[0m:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/wandb_run.py[0m:403: in wrapper_fn
    return func(self, *args, **kwargs)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/wandb_run.py[0m:393: in wrapper
    return func(self, *args, **kwargs)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/wandb_run.py[0m:3071: in use_artifact
    artifact = public_api._artifact(type=type, name=name)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/normalize.py[0m:71: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/normalize.py[0m:25: in wrapper
    return func(*args, **kwargs)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/public/api.py[0m:1210: in _artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>

    @classmethod
    def _from_name(
        cls,
        *,
        entity: str,
        project: str,
        name: str,
        client: RetryingClient,
        enable_tracking: bool = False,
    ) -> Artifact:
        server_supports_enabling_artifact_usage_tracking = (
            InternalApi().server_project_type_introspection()
        )
        query_vars = ["$entityName: String!", "$projectName: String!", "$name: String!"]
        query_args = ["name: $name"]
        if server_supports_enabling_artifact_usage_tracking:
            query_vars.append("$enableTracking: Boolean")
            query_args.append("enableTracking: $enableTracking")

        vars_str = ", ".join(query_vars)
        args_str = ", ".join(query_args)

        query = gql(
            f"""
            query ArtifactByName({vars_str}) {{
                project(name: $projectName, entityName: $entityName) {{
                    artifact({args_str}) {{
                        ...ArtifactFragment
                    }}
                }}
            }}
            {_gql_artifact_fragment()}
            """
        )
        query_variable_values: dict[str, Any] = {
            "entityName": entity,
            "projectName": project,
            "name": name,
        }
        if server_supports_enabling_artifact_usage_tracking:
            query_variable_values["enableTracking"] = enable_tracking

        response = client.execute(
            query,
            variable_values=query_variable_values,
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[1m[31mE           wandb.errors.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'[0m

[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/artifacts/artifact.py[0m:279: CommError
[31m[1m___________________ ERROR at setup of test_class_names ___________________[0m

args = (<wandb.apis.public.api.Api object at 0x7f58fc807a10>,)
kwargs = {'name': 'music_genre_classification/preprocessed_data.csv:latest', 'type': None}
message = "artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'"
payload = "artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'"

    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)

[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/normalize.py[0m:25:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/public/api.py[0m:1210: in _artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>

    @classmethod
    def _from_name(
        cls,
        *,
        entity: str,
        project: str,
        name: str,
        client: RetryingClient,
        enable_tracking: bool = False,
    ) -> Artifact:
        server_supports_enabling_artifact_usage_tracking = (
            InternalApi().server_project_type_introspection()
        )
        query_vars = ["$entityName: String!", "$projectName: String!", "$name: String!"]
        query_args = ["name: $name"]
        if server_supports_enabling_artifact_usage_tracking:
            query_vars.append("$enableTracking: Boolean")
            query_args.append("enableTracking: $enableTracking")

        vars_str = ", ".join(query_vars)
        args_str = ", ".join(query_args)

        query = gql(
            f"""
            query ArtifactByName({vars_str}) {{
                project(name: $projectName, entityName: $entityName) {{
                    artifact({args_str}) {{
                        ...ArtifactFragment
                    }}
                }}
            }}
            {_gql_artifact_fragment()}
            """
        )
        query_variable_values: dict[str, Any] = {
            "entityName": entity,
            "projectName": project,
            "name": name,
        }
        if server_supports_enabling_artifact_usage_tracking:
            query_variable_values["enableTracking"] = enable_tracking

        response = client.execute(
            query,
            variable_values=query_variable_values,
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[1m[31mE           ValueError: artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'[0m

[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/artifacts/artifact.py[0m:279: ValueError

[33mDuring handling of the above exception, another exception occurred:[0m

request = <SubRequest 'data' for <Function test_column_presence_and_type>>

    @pytest.fixture(scope="session")
    def data(request):

        reference_artifact = request.config.option.reference_artifact

        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")

        sample_artifact = request.config.option.sample_artifact

        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")

>       local_path = run.use_artifact(reference_artifact).file()

[1m[31mconftest.py[0m:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/wandb_run.py[0m:403: in wrapper_fn
    return func(self, *args, **kwargs)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/wandb_run.py[0m:393: in wrapper
    return func(self, *args, **kwargs)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/wandb_run.py[0m:3071: in use_artifact
    artifact = public_api._artifact(type=type, name=name)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/normalize.py[0m:71: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/normalize.py[0m:25: in wrapper
    return func(*args, **kwargs)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/public/api.py[0m:1210: in _artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>

    @classmethod
    def _from_name(
        cls,
        *,
        entity: str,
        project: str,
        name: str,
        client: RetryingClient,
        enable_tracking: bool = False,
    ) -> Artifact:
        server_supports_enabling_artifact_usage_tracking = (
            InternalApi().server_project_type_introspection()
        )
        query_vars = ["$entityName: String!", "$projectName: String!", "$name: String!"]
        query_args = ["name: $name"]
        if server_supports_enabling_artifact_usage_tracking:
            query_vars.append("$enableTracking: Boolean")
            query_args.append("enableTracking: $enableTracking")

        vars_str = ", ".join(query_vars)
        args_str = ", ".join(query_args)

        query = gql(
            f"""
            query ArtifactByName({vars_str}) {{
                project(name: $projectName, entityName: $entityName) {{
                    artifact({args_str}) {{
                        ...ArtifactFragment
                    }}
                }}
            }}
            {_gql_artifact_fragment()}
            """
        )
        query_variable_values: dict[str, Any] = {
            "entityName": entity,
            "projectName": project,
            "name": name,
        }
        if server_supports_enabling_artifact_usage_tracking:
            query_variable_values["enableTracking"] = enable_tracking

        response = client.execute(
            query,
            variable_values=query_variable_values,
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[1m[31mE           wandb.errors.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'[0m

[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/artifacts/artifact.py[0m:279: CommError
[31m[1m__________________ ERROR at setup of test_column_ranges __________________[0m

args = (<wandb.apis.public.api.Api object at 0x7f58fc807a10>,)
kwargs = {'name': 'music_genre_classification/preprocessed_data.csv:latest', 'type': None}
message = "artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'"
payload = "artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'"

    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)

[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/normalize.py[0m:25:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/public/api.py[0m:1210: in _artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>

    @classmethod
    def _from_name(
        cls,
        *,
        entity: str,
        project: str,
        name: str,
        client: RetryingClient,
        enable_tracking: bool = False,
    ) -> Artifact:
        server_supports_enabling_artifact_usage_tracking = (
            InternalApi().server_project_type_introspection()
        )
        query_vars = ["$entityName: String!", "$projectName: String!", "$name: String!"]
        query_args = ["name: $name"]
        if server_supports_enabling_artifact_usage_tracking:
            query_vars.append("$enableTracking: Boolean")
            query_args.append("enableTracking: $enableTracking")

        vars_str = ", ".join(query_vars)
        args_str = ", ".join(query_args)

        query = gql(
            f"""
            query ArtifactByName({vars_str}) {{
                project(name: $projectName, entityName: $entityName) {{
                    artifact({args_str}) {{
                        ...ArtifactFragment
                    }}
                }}
            }}
            {_gql_artifact_fragment()}
            """
        )
        query_variable_values: dict[str, Any] = {
            "entityName": entity,
            "projectName": project,
            "name": name,
        }
        if server_supports_enabling_artifact_usage_tracking:
            query_variable_values["enableTracking"] = enable_tracking

        response = client.execute(
            query,
            variable_values=query_variable_values,
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[1m[31mE           ValueError: artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'[0m

[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/artifacts/artifact.py[0m:279: ValueError

[33mDuring handling of the above exception, another exception occurred:[0m

request = <SubRequest 'data' for <Function test_column_presence_and_type>>

    @pytest.fixture(scope="session")
    def data(request):

        reference_artifact = request.config.option.reference_artifact

        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")

        sample_artifact = request.config.option.sample_artifact

        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")

>       local_path = run.use_artifact(reference_artifact).file()

[1m[31mconftest.py[0m:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/wandb_run.py[0m:403: in wrapper_fn
    return func(self, *args, **kwargs)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/wandb_run.py[0m:393: in wrapper
    return func(self, *args, **kwargs)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/wandb_run.py[0m:3071: in use_artifact
    artifact = public_api._artifact(type=type, name=name)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/normalize.py[0m:71: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/normalize.py[0m:25: in wrapper
    return func(*args, **kwargs)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/public/api.py[0m:1210: in _artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>

    @classmethod
    def _from_name(
        cls,
        *,
        entity: str,
        project: str,
        name: str,
        client: RetryingClient,
        enable_tracking: bool = False,
    ) -> Artifact:
        server_supports_enabling_artifact_usage_tracking = (
            InternalApi().server_project_type_introspection()
        )
        query_vars = ["$entityName: String!", "$projectName: String!", "$name: String!"]
        query_args = ["name: $name"]
        if server_supports_enabling_artifact_usage_tracking:
            query_vars.append("$enableTracking: Boolean")
            query_args.append("enableTracking: $enableTracking")

        vars_str = ", ".join(query_vars)
        args_str = ", ".join(query_args)

        query = gql(
            f"""
            query ArtifactByName({vars_str}) {{
                project(name: $projectName, entityName: $entityName) {{
                    artifact({args_str}) {{
                        ...ArtifactFragment
                    }}
                }}
            }}
            {_gql_artifact_fragment()}
            """
        )
        query_variable_values: dict[str, Any] = {
            "entityName": entity,
            "projectName": project,
            "name": name,
        }
        if server_supports_enabling_artifact_usage_tracking:
            query_variable_values["enableTracking"] = enable_tracking

        response = client.execute(
            query,
            variable_values=query_variable_values,
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[1m[31mE           wandb.errors.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'[0m

[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/artifacts/artifact.py[0m:279: CommError
[31m[1m_______________ ERROR at setup of test_kolmogorov_smirnov ________________[0m

args = (<wandb.apis.public.api.Api object at 0x7f58fc807a10>,)
kwargs = {'name': 'music_genre_classification/preprocessed_data.csv:latest', 'type': None}
message = "artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'"
payload = "artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'"

    @wraps(func)
    def wrapper(*args, **kwargs):
        message = "Whoa, you found a bug."
        try:
>           return func(*args, **kwargs)

[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/normalize.py[0m:25:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/public/api.py[0m:1210: in _artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>

    @classmethod
    def _from_name(
        cls,
        *,
        entity: str,
        project: str,
        name: str,
        client: RetryingClient,
        enable_tracking: bool = False,
    ) -> Artifact:
        server_supports_enabling_artifact_usage_tracking = (
            InternalApi().server_project_type_introspection()
        )
        query_vars = ["$entityName: String!", "$projectName: String!", "$name: String!"]
        query_args = ["name: $name"]
        if server_supports_enabling_artifact_usage_tracking:
            query_vars.append("$enableTracking: Boolean")
            query_args.append("enableTracking: $enableTracking")

        vars_str = ", ".join(query_vars)
        args_str = ", ".join(query_args)

        query = gql(
            f"""
            query ArtifactByName({vars_str}) {{
                project(name: $projectName, entityName: $entityName) {{
                    artifact({args_str}) {{
                        ...ArtifactFragment
                    }}
                }}
            }}
            {_gql_artifact_fragment()}
            """
        )
        query_variable_values: dict[str, Any] = {
            "entityName": entity,
            "projectName": project,
            "name": name,
        }
        if server_supports_enabling_artifact_usage_tracking:
            query_variable_values["enableTracking"] = enable_tracking

        response = client.execute(
            query,
            variable_values=query_variable_values,
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[1m[31mE           ValueError: artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'[0m

[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/artifacts/artifact.py[0m:279: ValueError

[33mDuring handling of the above exception, another exception occurred:[0m

request = <SubRequest 'data' for <Function test_column_presence_and_type>>

    @pytest.fixture(scope="session")
    def data(request):

        reference_artifact = request.config.option.reference_artifact

        if reference_artifact is None:
            pytest.fail("--reference_artifact missing on command line")

        sample_artifact = request.config.option.sample_artifact

        if sample_artifact is None:
            pytest.fail("--sample_artifact missing on command line")

>       local_path = run.use_artifact(reference_artifact).file()

[1m[31mconftest.py[0m:28:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/wandb_run.py[0m:403: in wrapper_fn
    return func(self, *args, **kwargs)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/wandb_run.py[0m:393: in wrapper
    return func(self, *args, **kwargs)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/wandb_run.py[0m:3071: in use_artifact
    artifact = public_api._artifact(type=type, name=name)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/normalize.py[0m:71: in wrapper
    raise CommError(message, err).with_traceback(sys.exc_info()[2])
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/normalize.py[0m:25: in wrapper
    return func(*args, **kwargs)
[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/apis/public/api.py[0m:1210: in _artifact
    artifact = wandb.Artifact._from_name(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = <class 'wandb.sdk.artifacts.artifact.Artifact'>

    @classmethod
    def _from_name(
        cls,
        *,
        entity: str,
        project: str,
        name: str,
        client: RetryingClient,
        enable_tracking: bool = False,
    ) -> Artifact:
        server_supports_enabling_artifact_usage_tracking = (
            InternalApi().server_project_type_introspection()
        )
        query_vars = ["$entityName: String!", "$projectName: String!", "$name: String!"]
        query_args = ["name: $name"]
        if server_supports_enabling_artifact_usage_tracking:
            query_vars.append("$enableTracking: Boolean")
            query_args.append("enableTracking: $enableTracking")

        vars_str = ", ".join(query_vars)
        args_str = ", ".join(query_args)

        query = gql(
            f"""
            query ArtifactByName({vars_str}) {{
                project(name: $projectName, entityName: $entityName) {{
                    artifact({args_str}) {{
                        ...ArtifactFragment
                    }}
                }}
            }}
            {_gql_artifact_fragment()}
            """
        )
        query_variable_values: dict[str, Any] = {
            "entityName": entity,
            "projectName": project,
            "name": name,
        }
        if server_supports_enabling_artifact_usage_tracking:
            query_variable_values["enableTracking"] = enable_tracking

        response = client.execute(
            query,
            variable_values=query_variable_values,
        )
        project_attrs = response.get("project")
        if not project_attrs:
            raise ValueError(f"project '{project}' not found under entity '{entity}'")
        attrs = project_attrs.get("artifact")
        if not attrs:
>           raise ValueError(f"artifact '{name}' not found in '{entity}/{project}'")
[1m[31mE           wandb.errors.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'[0m

[1m[31m../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/wandb/sdk/artifacts/artifact.py[0m:279: CommError
[33m============================ warnings summary ============================[0m
../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/google/protobuf/internal/well_known_types.py:91
  /home/ymarca/anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/google/protobuf/internal/well_known_types.py:91: DeprecationWarning: datetime.datetime.utcfromtimestamp() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.fromtimestamp(timestamp, datetime.UTC).
    _EPOCH_DATETIME_NAIVE = datetime.datetime.utcfromtimestamp(0)

../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/google/protobuf/internal/well_known_types.py:195: 3 warnings
test_data.py: 12 warnings
  /home/ymarca/anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/google/protobuf/internal/well_known_types.py:195: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    self.FromDatetime(datetime.datetime.utcnow())

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
[36m[1m======================== short test summary info =========================[0m
[31mERROR[0m test_data.py::[1mtest_column_presence_and_type[0m - wandb.errors.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'
[31mERROR[0m test_data.py::[1mtest_class_names[0m - wandb.errors.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'
[31mERROR[0m test_data.py::[1mtest_column_ranges[0m - wandb.errors.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'
[31mERROR[0m test_data.py::[1mtest_kolmogorov_smirnov[0m - wandb.errors.errors.CommError: artifact 'preprocessed_data.csv:latest' not found in 'yurimarca-ai/music_genre_classification'
[31m===================== [33m16 warnings[0m, [31m[1m4 errors[0m[31m in 1.95s[0m[31m =====================[0m
