[1m========================== test session starts ===========================[0m
platform linux -- Python 3.13.0, pytest-8.3.4, pluggy-1.5.0 -- /home/ymarca/anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/bin/python3.13
cachedir: .pytest_cache
rootdir: /home/ymarca/Code/music_genre_classification/check_data
collected 4 items                                                        [0m

test_data.py::test_column_presence_and_type [32mPASSED[0m
test_data.py::test_class_names [32mPASSED[0m
test_data.py::test_column_ranges [32mPASSED[0m
test_data.py::test_kolmogorov_smirnov [31mFAILED[0m

================================ FAILURES ================================
[31m[1m________________________ test_kolmogorov_smirnov _________________________[0m

data = (       Unnamed: 0  ...                                    text_feature
0               0  ...                        ... Euphoric Hardstyle
41974       41974  ...                         Best of Hardstyle 2020

[41975 rows x 19 columns])
ks_alpha = 0.05

    def test_kolmogorov_smirnov(data, ks_alpha):

        sample1, sample2 = data

        columns = [
            "danceability",
            "energy",
            "loudness",
            "speechiness",
            "acousticness",
            "instrumentalness",
            "liveness",
            "valence",
            "tempo",
            "duration_ms"
        ]

        # Bonferroni correction for multiple hypothesis testing
        # (see my blog post on this topic to see where this comes from:
        # https://towardsdatascience.com/precision-and-recall-trade-off-and-multiple-hypothesis-testing-family-wise-error-rate-vs-false-71a85057ca2b)
        alpha_prime = 1 - (1 - ks_alpha)**(1 / len(columns))

        for col in columns:

            ts, p_value = scipy.stats.ks_2samp(sample1[col], sample2[col])

            # NOTE: as always, the p-value should be interpreted as the probability of
            # obtaining a test statistic (TS) equal or more extreme that the one we got
            # by chance, when the null hypothesis is true. If this probability is not
            # large enough, this dataset should be looked at carefully, hence we fail
            try:
>               assert p_value > alpha_prime
[1m[31mE               assert np.float64(nan) > 0.005116196891823743[0m

[1m[31mtest_data.py[0m:121: AssertionError

[33mDuring handling of the above exception, another exception occurred:[0m

data = (       Unnamed: 0  ...                                    text_feature
0               0  ...                        ... Euphoric Hardstyle
41974       41974  ...                         Best of Hardstyle 2020

[41975 rows x 19 columns])
ks_alpha = 0.05

    def test_kolmogorov_smirnov(data, ks_alpha):

        sample1, sample2 = data

        columns = [
            "danceability",
            "energy",
            "loudness",
            "speechiness",
            "acousticness",
            "instrumentalness",
            "liveness",
            "valence",
            "tempo",
            "duration_ms"
        ]

        # Bonferroni correction for multiple hypothesis testing
        # (see my blog post on this topic to see where this comes from:
        # https://towardsdatascience.com/precision-and-recall-trade-off-and-multiple-hypothesis-testing-family-wise-error-rate-vs-false-71a85057ca2b)
        alpha_prime = 1 - (1 - ks_alpha)**(1 / len(columns))

        for col in columns:

            ts, p_value = scipy.stats.ks_2samp(sample1[col], sample2[col])

            # NOTE: as always, the p-value should be interpreted as the probability of
            # obtaining a test statistic (TS) equal or more extreme that the one we got
            # by chance, when the null hypothesis is true. If this probability is not
            # large enough, this dataset should be looked at carefully, hence we fail
            try:
                assert p_value > alpha_prime
            except AssertionError as err:
>               logger.error("test_kolmogorov_smirnov: p-value below threshold: %.5f", p_value)
[1m[31mE               NameError: name 'logger' is not defined[0m

[1m[31mtest_data.py[0m:123: NameError
[33m============================ warnings summary ============================[0m
../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/google/protobuf/internal/well_known_types.py:91
  /home/ymarca/anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/google/protobuf/internal/well_known_types.py:91: DeprecationWarning: datetime.datetime.utcfromtimestamp() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.fromtimestamp(timestamp, datetime.UTC).
    _EPOCH_DATETIME_NAIVE = datetime.datetime.utcfromtimestamp(0)

../../../anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/google/protobuf/internal/well_known_types.py:195: 3 warnings
test_data.py: 12 warnings
  /home/ymarca/anaconda3/envs/mlflow-2a75d5483ccc955a591f3bf19dd358a7ce61a76f/lib/python3.13/site-packages/google/protobuf/internal/well_known_types.py:195: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
    self.FromDatetime(datetime.datetime.utcnow())

test_data.py::test_column_presence_and_type
  /home/ymarca/Code/music_genre_classification/check_data/conftest.py:29: DtypeWarning: Columns (16) have mixed types. Specify dtype option on import or set low_memory=False.
    sample1 = pd.read_csv(local_path)

test_data.py::test_column_presence_and_type
  /home/ymarca/Code/music_genre_classification/check_data/conftest.py:32: DtypeWarning: Columns (16) have mixed types. Specify dtype option on import or set low_memory=False.
    sample2 = pd.read_csv(local_path)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
[36m[1m======================== short test summary info =========================[0m
[31mFAILED[0m test_data.py::[1mtest_kolmogorov_smirnov[0m - NameError: name 'logger' is not defined
[31m================ [31m[1m1 failed[0m, [32m3 passed[0m, [33m18 warnings[0m[31m in 4.68s[0m[31m ================[0m
